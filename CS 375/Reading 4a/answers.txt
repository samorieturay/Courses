1. {"coord":{"lon":-75.2024,"lat":39.9597},"weather":[{"id":804,"main":"Clouds","description":"overcast clouds","icon":"04n"}],"base":"stations","main":{"temp":296.07,"feels_like":296.92,"temp_min":295.3,"temp_max":297.14,"pressure":1017,"humidity":96,"sea_level":1017,"grnd_level":1012},"visibility":10000,"wind":{"speed":1.46,"deg":155,"gust":3.72},"clouds":{"all":100},"dt":1752550619,"sys":{"type":2,"id":2037403,"country":"US","sunrise":1752486237,"sunset":1752539342},"timezone":-14400,"id":0,"name":"Philadelphia","cod":200}

2

a. Most APIs make us generate an API key to use them so they can identify individual users, track usage, limit how much each user can request, and prevent abuse.

b. If you try to make a request to the OpenWeather API with an invalid key, the API will reject your request and return an error response (such as 401 Unauthorized or a message about an invalid key).

c. We put our API keys in a separate file instead of hardcoding them into the server code to keep them secret, make them easier to change, and avoid accidentally exposing them if the code is shared publicly.

d. We have our server make the API requests instead of the client so the API key stays hidden and secure, and to avoid issues with CORS and direct browser requests.

e. The Fetch API is built into browsers, uses promises, and is lower-level (requires extra steps for JSON and error handling), while Axios is an external library that works in both browsers and Node, automatically parses JSON, and provides a simpler interface for many tasks.

3
a.
    #1 "Client requested /data": Triggered when the client requests /data (user clicks submit); prints first; server terminal.

    #4 "Request sent to API": Triggered after #1 when the server sends the API request; prints second; server terminal.

    #2 "API response received": Triggered when the server gets the API response; prints third (if successful); server terminal.

    #3 "Error when requesting from API": Triggered if there's an error with the API request; prints instead of #2; server terminal.

    #5 "http://localhost:3000": Triggered once when the server starts; prints at server start; server terminal.

    #10 "Sent request GET /data": Triggered when the user clicks submit; prints first (browser side); browser console.

    #6 "Received response headers": Triggered when fetch receives response headers from server; prints second (browser side); browser console.

    #7 "Received response body": Triggered when fetch parses the JSON body; prints third (browser side); browser console.

    #8 console.log(body): Triggered after #7 to log the data; prints fourth (browser side); browser console.

    #9 console.log(error): Triggered if there is an error in fetch; prints instead of #6-8; browser console.

b. The client passes the zip code to the server by adding it as a query parameter in the URL (e.g., /data?zip=19104).

c. The server passes the zip code and API key to the OpenWeather API by including them in the request URL sent to the API.

d. We use res.json instead of res.send to automatically set the Content-Type header and serialize the data as JSON, making it easy for the client to parse the response.

e. If we move res.json(data) outside of the axios .then() block, the server will send the response immediately, before the API call finishes, so the client will always get an empty object {} instead of the actual data from the API.